# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SzybkaWtyczkaDialog
                                 A QGIS plugin
 Podstawy Informatyki
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-03
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Michał Spręga 
        email                : cokolwiek
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'szybka_wtyczka_dialog_base.ui'))


class SzybkaWtyczkaDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(SzybkaWtyczkaDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pushButton_calc_dh.clicked.connect(self.calculate_dh)
        
        
        
    def calculate_area(self):
        current_layer = self.mMapLayerComboBox.currentLayer()
        selected_features = current_layer.selectedFeatures()
        for i,feature in enumerate(selected_features):
            current_x = feature.geometry().asPoint().x()
            previous_y = selected_features[i-1].geometry().asPoint().y()
            try:
                next_y = selected_features[i+1].geometry().asPoint().y()
            except:
                next_y = selected_features[0].geometry().asPoint().y()
            x2_area = current_x*(next_y-previous_y)
        area = x2_area/2
        self.label_3_area_results.setText(f'{d_h:.4} m')
            
    def calculate_dh(self):

        current_layer = self.mMapLayerComboBox.currentLayer()
        selected_features = current_layer.selectedFeatures()
        if(np.shape(selected_features)[0]==2):
            h_1 = float(selected_features[0]['wysokosc'])
            h_2 = float(selected_features[1]['wysokosc'])
            d_h = h_2-h_1
            self.label_dh_results.setText(f'{d_h} m')
        else:
            self.dockWidgetContents_error.label_error.setText(f'Wybrano za mało bądź za dużo punktów')















